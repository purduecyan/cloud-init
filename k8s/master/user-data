#cloud-config
autoinstall:
  version: 1
  early-commands:
    - systemctl stop ssh
  network:
    network:
      version: 2
      ethernets:
        eth0:
          match:
            name: e*
          dhcp4: true
  apt:
    sources:
      docker.list:
        source: "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
        key: |
          -----BEGIN PGP PUBLIC KEY BLOCK-----

          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
          YT90qFF93M3v01BbxP+EIY2/9tiIPbrd
          =0YYh
          -----END PGP PUBLIC KEY BLOCK-----

  identity:
    hostname: master
    username: ubuntu
    password: $6$Yy0ebfjpzjJvKbpr$A/WjnQOsq18xbnILIt4Y0xKYcG66u5L7yyB7wnUfNm0lxGygx2jmXQ5axmcHJEy329Bp1AUpwWQEPnK6MGFMK.
  
  packages:
    - apt-transport-https
    - ca-certificates
    - curl
    - software-properties-common
    - docker-ce
    - docker-ce-cli
    - containerd.io
    - git
    - nfs-kernel-server
    - nfs-common
    - openssh-server

  user-data:
    disable_root: false
    write_files:
    - path: /etc/docker/daemon.json
      content: |
        {
          "exec-opts": ["native.cgroupdriver=systemd"],
          "log-driver": "json-file",
          "log-opts": {
            "max-size": "100m"
          },
          "storage-driver": "overlay2"
        }
        
      permissions: '0644'
      owner: root:root
    - path: /etc/sysctl.d/kubernetes.conf
      content: |
        net.bridge.bridge-nf-call-ip6tables = 1
        net.bridge.bridge-nf-call-iptables = 1

      permissions: '0644'
      owner: root:root
    - path: /home/ubuntu/utils/nfs-server.sh
      content: |
        #!/bin/bash
        
        NFS_STORE="/srv/nfs/kube"
        LINE="$NFS_STORE	*(rw,sync,no_subtree_check,no_root_squash,no_all_squash)"
        FILE="/etc/exports"

        if [ ! -d $NFS_STORE ]; then
            printf '%s\n' --------------------
            printf "Creating directories...\n"
            printf '%s\n' --------------------
            sudo mkdir -p $NFS_STORE
            ls -R /srv
            printf '%s\n' --------------------
            printf "Directories created.\n"
            printf '%s\n' --------------------
        fi

        printf '%s\n' --------------------
        printf "Configuring NFS service...\n"
        printf '%s\n' --------------------
        grep -qF -- "$LINE" "$FILE" || echo $LINE | sudo tee -a $FILE
        sudo chown nobody:nogroup $NFS_STORE
        sudo exportfs -rav
        sudo exportfs -v
        printf '%s\n' --------------------
        printf "Done.\n"
        printf '%s\n' --------------------

        printf '%s\n' --------------------
        printf "Starting NFS service...\n"
        printf '%s\n' --------------------
        sudo systemctl daemon-reload
        sudo systemctl enable nfs-kernel-server
        sudo systemctl restart nfs-kernel-server.service
        sudo systemctl status nfs-kernel-server.service
        printf '%s\n' --------------------
        printf "Done.\n"
        printf '%s\n' --------------------
        
      permissions: '0755'
    - path: /home/ubuntu/utils/post-install.sh
      content: |
        #!/bin/bash
        printf '%s\n' --------------------
        printf "Starting NFS service...\n"
        printf '%s\n' --------------------
        sudo systemctl daemon-reload
        sudo systemctl enable nfs-kernel-server
        sudo systemctl restart nfs-kernel-server.service
        sudo systemctl status nfs-kernel-server.service
        printf '%s\n' --------------------
        printf "Done.\n"
        printf '%s\n' --------------------
        
      permissions: '0755'

    runcmd:
      - groupadd docker
      - usermod -aG docker ubuntu
      - newgrp docker
      - systemctl enable docker
      - systemctl daemon-reload
      - sudo systemctl restart docker
      - docker run hello-world
      - sed -i '/swap/d' /etc/fstab
      - swapoff -a
      - 'sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg'
      - 'echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list'
      - apt-get update
      - 'echo "Installing kubectl..."'
      - apt-get install -y kubelet=1.20.15-00 kubeadm=1.20.15-00 kubectl=1.20.15-00
      - apt-mark hold kubelet kubeadm kubectl
      - 'cd $USER'
      - 'echo "Initialsing Kubernetes cluster..."'
      - 'sudo kubeadm init --apiserver-advertise-address=$(hostname -I | cut -d " " -f 1) --pod-network-cidr=192.168.0.0/16 >> /root/kubeinit.log 2>/dev/null'
      - 'sudo mkdir -p ~/.kube'
      - 'sudo cp /etc/kubernetes/admin.conf ~/.kube/config'
      - 'sudo chown -R $(id -u):$(id -g) ~/.kube/config'
      - 'echo "Step 2: Installing Calico"'
      - 'kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml'
      - 'echo "Step 3: Installing Metallb"'
      - 'kubectl get configmap kube-proxy -n kube-system -o yaml | sed -e "s/strictARP: false/strictARP: true/" | kubectl apply -f - -n kube-system'
      - 'kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.12.1/manifests/namespace.yaml'
      - 'kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.12.1/manifests/metallb.yaml'
      - 'echo "Step 4: Installing Kustomize v3.2.0"'
      - curl --location --remote-name "https://github.com/kubernetes-sigs/kustomize/releases/download/v3.2.0/kustomize_3.2.0_linux_amd64"
      - chmod a+x kustomize_3.2.0_linux_amd64
      - sudo mv kustomize_3.2.0_linux_amd64 /usr/local/bin/kustomize
      - kustomize version
      - 'echo "Step 5: Starting NFS Server"'
      - 'sudo chmod +x /home/ubuntu/utils/nfs-server.sh'
      - './home/ubuntu/utils/nfs-server.sh'
      - 'sudo chmod +x /home/ubuntu/utils/post-install.sh'
      - './home/ubuntu/utils/post-install.sh'
      - 'cd ~'
      - 'git clone https://github.com/kubernetes-sigs/nfs-subdir-external-provisioner.git'
      - 'cd nfs-subdir-external-provisioner/deploy'
      - 'sed -i "s/10.3.243.101/$(hostname -I | cut -d " " -f 1)/g" deployment.yaml'
      - 'sed -i "s+/ifs/kubernetes+/srv/nfs/kube+g" deployment.yaml'
      - 'kubectl apply -f class.yaml rbac.yaml deployment.yaml'
      - 'chown -R ubuntu:ubuntu /home/ubuntu'
      - 'sudo systemctl enable ssh'
      - 'sudo systemctl start ssh' 
    ## Write arbitrary files to the file-system (including binaries!)
  late-commands:
    - sudo netplan --debug generate
    - sudo netplan --debug apply
    - sudo systemctl restart systemd-networkd
    - echo "ubuntu ALL=(ALL) NOPASSWD:ALL" > /target/etc/sudoers.d/ubuntu
    - apt-get -y update
